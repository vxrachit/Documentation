[[{"l":"Welcome to vxRachit Documentation Hub","p":["Build Status","This site is generated with Retype—enjoy instant full-text search, automatic dark/light modes, and collaborative editing."]},{"l":"\uD83D\uDC4B Hello & Welcome!","p":["I’m Rachit Verma (vxRachit), a 2nd year B.Tech (Hons.) CSE student at GLA University, Mathura. Here you’ll find blueprints, deep dives, and reflections on everything I build."]},{"l":"Snapshot","p":["Languages : Python, JavaScript/TypeScript, SQL, Java","Frameworks : React, FastAPI, Tailwind CSS, PyQt6","DevOps & Cloud : Supabase, Cloudflare Pages, GitHub Actions","Dedicated to building intelligent UIs, full-stack systems, and real-time AI integrations using modern web and Python tools.","Beyond programming: I enjoy gaming, diving into tech news, experimenting with UI/UX tools, and exploring emerging dev frameworks."]},{"l":"Project Spotlight","p":["Scrolls through an entire webpage, captures every frame, and exports a clean multi-page PDF. Python · PyQt6 · Pillow","Role-based LMS with Supabase auth, real-time updates, and interactive dashboards. React · FastAPI · Supabase","Gemini-powered chatbot sporting multi-session memory, animated streaming replies, and dark-mode toggle. React · FastAPI · Gemini AI","End-to-end academic suite—ID cards, leave workflows, and automated docs. React · FastAPI · MySQL","AI-driven crop-advisory dashboard with disease detection, weather insights, and Supabase-backed auth. React · FastAPI · Supabase · Gemini AI"]},{"l":"Connect","p":["Platform","Handle","GitHub","@vxrachit","LinkedIn","vxrachit","Portfolio","vxrachit.dpdns.org","Email","mail@vxrachit.dpdns.org"]},{"l":"What’s Inside","p":["Build Guides– step-by-step setup & deployment","Architecture Notes– diagrams, data flow, API contracts","Snippets & How-Tos– bite-sized tips for common tasks","Research Logs– experiments in NLP, automation, and UX"]},{"l":"Navigation Tips","p":["Use the sidebar for quick section jumps, or press / to open the global search palette. Every topic is grouped for clarity and rapid reference."]},{"l":"Stay Updated","p":["Docs grow with every commit. Star the repo or bookmark this page so you never miss an update.","Thanks for Visiting ✨"]}],[{"i":"#","p":["AI-powered crop advisory and farm-management dashboard with Gemini, FastAPI, Supabase, and a React + Vite frontend."]},{"l":"FarmFlux","p":["GitHub· vxrachit/FarmFlux","FarmFlux brings together soil analysis, crop-disease detection, weather insight, and a Gemini-powered chatbot—helping farmers make informed, data-driven decisions."]},{"l":"Feature Highlights","p":["\uD83C\uDF0D Multi-Language","\uD83C\uDF24️ Weather Widget","\uD83C\uDF31 Crop Dashboard","\uD83D\uDCCA Farm Analytics","\uD83D\uDD10 Supabase Auth","\uD83E\uDDD1‍\uD83C\uDF3E Chatbot","\uD83E\uDDEA Disease Detection","Category","Details","Email/password & magic-link login","English, Hindi","Gemini Vision detects leaf diseases from photos","Natural-language Q&A (Gemini Pro) with citations","Planting cycles, growth stages, task tracker","Real-time 7-day forecast & hourly breakdown","Yield estimates & input-cost tracking"]},{"l":"Screenshots"},{"l":"Tech Stack","p":["Frontend","Backend","Auth / Data","React 18 + Vite + TypeScript","FastAPI (Python 3.11)","Supabase Auth","Tailwind CSS","Gemini 2.0 Flash Model","Row-level security","React Router v6","HTTPX","JWT stored by Supabase"]},{"l":"Project Structure"},{"l":"Setup & Run Locally","p":["Open http://localhost:5173 and configure your Gemini and Supabase keys in the respective .env files."]},{"l":"Authentication Flow"},{"l":"Upcoming","p":["Batch image upload for multi-leaf diagnosis","Offline TensorFlow.js fallback for field use","Crop-rotation planner & expense ledger","SMS push alerts in rural networks"]},{"l":"License","p":["MIT © Rachit Verma— free to fork & adapt."]}],[{"i":"#","p":["Auto-Scrolling Webpage Capture to PDF with PyQt6"]},{"l":"Auto-Scrolling Webpage Capture to PDF","p":["Python PyQt6 PDF","GitHub: vxrachit/Scroll-To-Pdf","A desktop application built with PyQt6 that automatically scrolls through a webpage, captures screenshots, stitches them, and exports the result as a multi-page PDF."]},{"l":"Screenshots","p":["Software Interface"]},{"l":"Overview","p":["When you need a PDF of an entire webpage (including content below the fold), manual scrolling and screenshotting is tedious. AutoScrollCapturePDF automates:","Scrolling through the page","Taking successive screenshots","Detecting end of page via image similarity","Concatenating and saving as PDF","Ideal for long articles, reports, dashboards, and documentation pages."]},{"l":"Features","p":["Configurable scroll delay, height, and max scroll count","Automatic end-of-page detection (image similarity threshold)","Preview stitched result before export","Primary and fallback PDF export methods (Pillow and img2pdf)","Dark-themed, responsive PyQt6 GUI","Cross-platform (Windows/macOS/Linux)"]},{"l":"Installation","p":["Clone this repository:","(Optional) Create a virtual environment:","Install dependencies:","Ensure app_icon.ico sits alongside main.py in the project root."]},{"l":"Usage"},{"l":"Launching the Application","p":["The main window appears. Adjust settings then click Start Capture."]},{"l":"Settings Panel","p":["Setting","Description","Delay between scrolls","Seconds to wait after each scroll (0.1 - 5.0)","Max scrolls (0 = unlimited)","Maximum number of scroll actions before stopping","Scroll height (0 = auto)","Vertical pixels per scroll (0 uses default heights)","Fullscreen mode (F11)","Toggle auto height for full-screen vs windowed browsing"]},{"l":"Capture Workflow","p":["Click Start Capture→ 3‑second countdown → window minimizes","Focus browser and let it scroll+capture automatically","Status bar displays live updates and screenshot count","Capture stops on page end or reaching max scrolls","Window restores with Preview, Save, and Clear options"]},{"l":"Previewing","p":["Click Preview Screenshots to open a stitched image of all screenshots. Close preview to return."]},{"l":"Exporting to PDF","p":["Click Save as PDF","Choose destination file path (.pdf)","Application attempts Pillow export; on failure, uses img2pdf fallback"]},{"l":"Architecture","p":["main.py: GUI, settings, thread orchestration","CaptureThread: Runs scrolling & screenshot logic on background thread","Image Similarity: Grayscale thumbnails compared to detect end of page","PDF Export: Multi-page via Pillow or img2pdf fallback"]},{"l":"How It Works","p":["Initial Delay: 3 seconds to switch focus to browser","Scroll Loop:","Grab full-screen screenshot","Compare with previous (100×100 grayscale threshold)","If similar beyond 95%, capture final part and exit","Else, scroll down by configured height and repeat","Signal UI: screenshot_taken, status_update, capture_complete signals update progress"]},{"l":"Configuration Parameters","p":["0","0.5","10","boolean","counts","Default","delay","Description","False","is_fullscreen","manual_height","max_scrolls","Override auto scroll height if > 0","Parameter","pixels","seconds","Unit","Use fullscreen height (1300px) vs windowed (1245px)","Wait time between scroll & capture","Zero = infinite until end-of-page detected"]},{"l":"Packaging as Executable","p":["This project includes a PyInstaller spec ( main.spec):","Look under dist/ or build/ for the generated executable."]},{"l":"Troubleshooting","p":["Blank screenshots: Ensure browser window is not minimized and is in focus.","OCR or hidden UI elements: Use headless capture libraries or adjust scroll offsets.","Permission errors: On macOS, grant screen recording privileges.","PDF Export fails: Install img2pdf via pip install img2pdf."]},{"l":"FAQ","p":["Q: Can I capture only part of a page?","A: Not currently; feature coming soon (scroll region selection).","Q: Why are some screenshots repeated?","A: Overlapping scroll height may cause repeats. Increase delay or adjust scroll height.","Q: How do I change similarity threshold?","A: Hardcoded to 0.95; modify images_are_similar() in CaptureThread."]},{"l":"Contributing","p":["Fork the repo","Create a feature branch ( git checkout -b feature/YourFeature)","Commit your changes ( git commit -m 'Add feature')","Push to your branch ( git push origin feature/YourFeature)","Open a Pull Request","Please follow PEP8 and include tests for new functionality."]},{"l":"License","p":["This project is licensed under the MIT License. See LICENSE for details."]}]]